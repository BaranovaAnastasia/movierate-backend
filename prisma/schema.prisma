// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email       String  @unique
  name        String
  avatar_path String
  hash        String
  hashedRt    String?

  @@map("users")
  UserStats       UserStats?
  UserGenresStats UserGenresStats[]
  UserRatings     UserRatings[]
  UserWatched     UserWatched[]
  Review          Review[]
  MoviesList      MoviesList[]
}

model UserStats {
  user    User @relation(fields: [user_id], references: [id])
  user_id Int  @unique

  movies_count  Int @default(0)
  minutes_count   Int @default(0)
  reviews_count Int @default(0)

  @@map("user_stats")
}

model UserGenresStats {
  user    User @relation(fields: [user_id], references: [id])
  user_id Int

  genre_id      Int
  genre_name    String

  movies_count Int @default(0)

  @@map("user_genres_stats")

  @@unique([user_id, genre_id], name: "userGenre")
}

model UserRatings {
  user    User @relation(fields: [user_id], references: [id])
  user_id Int
  tmdb_id String
  rating  Int

  @@map("user_ratings")
  @@unique([user_id, tmdb_id], name: "userRating")
}

model UserWatched {
  user    User @relation(fields: [user_id], references: [id])
  user_id Int
  tmdb_id String

  @@map("user_watched")
  @@unique([user_id, tmdb_id], name: "userWatched")
}

model Review {
  id        Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  user    User @relation(fields: [user_id], references: [id])
  user_id Int
  tmdb_id String

  rating  Int
  title   String
  review  String

  @@map("review")
}

model MoviesList {
  id        Int      @id @default(autoincrement())

  user      User @relation(fields: [user_id], references: [id])
  user_id   Int
  list_name String
  is_public Boolean

  @@map("movies_list")
  @@unique([user_id, list_name], name: "userList")

  MovieInList MovieInList[]
}

model MovieInList {
  list    MoviesList @relation(fields: [list_id], references: [id])
  list_id Int 
  tmdb_id String

  @@map("movie_in_list")
  @@unique([list_id, tmdb_id], name: "movieInList")
}